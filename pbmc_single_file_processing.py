# -*- coding: utf-8 -*-
"""PBMC_single_file_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OKHMvs-dJMjwlsePlDNnidirTob9XANX
"""

#LIBRARIES
import pandas as pd 
import glob 
import os

"""**filtering genes** having 0s more than 80%"""

#list of Diseased dataset (HPV+ AND HPV-)
d_list = os.listdir('/content/drive/MyDrive/HNSCC/GSE139324')
print(d_list)

#adding path of files with name
string = '/content/drive/MyDrive/HNSCC/GSE139324/'
d_path = [string + x for x in d_list]
print (d_path)

print(" Enter the path where you want to save the file")
savedirectory = input()

#filtering genes having 0s more than 80%
i=0
for path in d_path:
  os.chdir(path)
  files = [i for i in glob.glob('*.{}'.format('csv'))]
  if len(files)>0:
    for name in files: 
      df = pd.read_csv(name)
      df = df.loc[:, (df==0).mean() < .80]
      savepath = savedirectory + '/' + d_list[i]
      i= i+1
      df.to_csv(savepath)

"""**Combining csv** according to their classification

not working
"""

#list of Diseased dataset (HPV+ AND HPV-)
d_list = os.listdir('/content/drive/MyDrive/HNSCC/single_file_processing')
print(d_list)
len(d_list)

#adding path of files with name
string = '/content/drive/MyDrive/HNSCC/single_file_processing/'
d_path = [string + x for x in d_list]
print (d_path)
len(d_path)

final_df= pd.DataFrame()
for path in d_path:
  for file in os.scandir(path):
    df= pd.read_csv(file)
    final_df = pd.concat((final_df,df),axis =0 )
   
  finaldf.to_csv(path + '/combined.csv')

"""working"""

directory = input()
final_df= pd.DataFrame()

for file in os.scandir(directory):
  df= pd.read_csv(file)
  final_df = pd.concat((final_df,df),axis =0 )

final_df.to_csv(directory+'/combined.csv')





"""Adding **Label**"""

h_pbmc="/content/drive/MyDrive/HNSCC/single_file_processing/pbmc_healthy_train/combined.csv"
h_pbmc = pd.read_csv(h_pbmc)
h_pbmc_l = h_pbmc.assign(label='0')
h_pbmc_l = pd.DataFrame(h_pbmc_l)
h_pbmc_l.drop(h_pbmc_l.iloc[:, 0:2], inplace=True, axis=1)
h_pbmc_l=h_pbmc_l.fillna(0)
h_pbmc_l.to_csv("/content/drive/MyDrive/HNSCC/single_file_processing/Labelled data/pbmc_healthy_train_0")

h_pbmc_l

#Disease PBMC (HPV+ and HPV-)
hp="/content/drive/MyDrive/HNSCC/single_file_processing/pbmc_disease_pos_train/combined.csv"
hp = pd.read_csv(hp)
hn="/content/drive/MyDrive/HNSCC/single_file_processing/pbmc_disease_neg_train/combined.csv"
hn = pd.read_csv(hn)

d_pbmc= pd.DataFrame()
d_pbmc= pd.concat((hp,hn),axis =0)
#d_pbmc = pd.read_csv(d_pbmc)
d_pbmc_l = d_pbmc.assign(label='1')
d_pbmc_l = pd.DataFrame(d_pbmc_l)
d_pbmc_l.drop(d_pbmc_l.iloc[:, 0:2], inplace=True, axis=1)
d_pbmc_l=d_pbmc_l.fillna(0)
d_pbmc_l.to_csv("/content/drive/MyDrive/HNSCC/single_file_processing/Labelled data/pbmc_disease_both_train_1")

d_pbmc_l

"""Merge both disease and healthy"""

d_pbmc_l

h_pbmc_l

pbmc_l

pbmc_l=pbmc_l.fillna(0)
pbmc_l.drop(pbmc_l.iloc[:, 0:1], inplace=True, axis=1)
pbmc_l

pbmc_l='/content/drive/MyDrive/HNSCC/single_file_processing/Labelled data/PBMC_Both_Train_Labelled.csv'

pbmc_l=pd.read_csv(pbmc_l)

pbmc_l.drop(pbmc_l.iloc[:, 0:1], inplace=True, axis=1)
pbmc_l

"""Removing genes again more than 80% """

pbmc_l=pbmc_l.loc[:,(pbmc_l==0).mean()<.80]
pbmc_l

"""Remove fisrt column and label"""

pbmc_label=pbmc_l.iloc[:,1:]     #without sample column

pbmc_wo_label = pbmc_label.iloc[: , :-1]  #without label

"""PymRMR"""

!pip install mrmr_selection
import mrmr

from mrmr import mrmr_classif

selected_features = mrmr_classif(X=pbmc_wo_label, y=pbmc_label['label'], K=100)

selected_features

X_selected = pbmc_wo_label[selected_features]
X_selected

# split a dataset into train and test sets

from sklearn.model_selection import train_test_split
# create dataset
# split into train test sets
Y=pbmc_label['label']
X_train, X_test, y_train, y_test = train_test_split(X_selected, Y, test_size=0.20)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)



import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(100,)),
    keras.layers.Dense(16, activation=tf.nn.relu),
	keras.layers.Dense(16, activation=tf.nn.relu),
    keras.layers.Dense(1, activation=tf.nn.sigmoid),
])

y_train=y_train.astype(int)
X_train=X_train.astype(int)
y_test=y_test.astype(int)
X_test=X_test.astype(int)

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=50, batch_size=32)
test_loss, test_acc = model.evaluate(X_test, y_test)
train_loss, train_acc=model.evaluate(X_train, y_train)

test_loss

test_acc

train_loss

train_acc

pred=model.predict(X_test)
pred=pred.round()
pred

from sklearn.metrics import confusion_matrix
#import scikitplot as skplt
y_true=y_test
y_pred=pred
cm1=confusion_matrix(y_true=y_test, y_pred=pred)
print(cm1)
#skplt.metrics.plot_confusion_mXtrix(real_values, pred_values,figsize=(8,8))

TP=cm1[0,0]
FN=cm1[0,1]
TN=cm1[1,1]
FP=cm1[1,0]

import math
sensitivity1 = TP / (TP + FN)
print('Sensitivity : ', sensitivity1 )

specificity1 = TN / (FP + TN)
print('Specificity : ', specificity1)
precision= TP / (TP + FP)
print('Precision : ', precision)
NegativePredictiveValue= TN / (TN + FN)
print('Negative Predictive Value : ', NegativePredictiveValue)
FPR=  FP / (FP + TN)
print('False Positive Rate : ', FPR)
FDR= FP / (FP + TP)
print('False Discovery Rate : ', FDR)
FNR= FN / (FN + TP)
print('False Negative Rate : ', FNR)
#Accuracy= (TP + TN) / (P + N)
#print('Accuracy : ', Accuracy)
F1_Score= (2*TP) / ((2*TP) + FP + FN)
print('F1 Score : ', F1_Score)
MCC=(TP*TN - FP*FN) / math.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))
print('Matthews Correlation Coefficient :', MCC)

f1_score(y_true, y_pred)

recall_score(y_test, pred)

matthews_corrcoef(y_test, pred)

accuracy_score(y_test, pred)

import sklearn.metrics as metrics
# calculate the fpr and tpr for all thresholds of the classification

fpr, tpr, threshold = metrics.roc_curve(y_test, pred)
roc_auc = metrics.auc(fpr, tpr)

!pip install matplotlib.pyplot
import matplotlib.pyplot as plt
plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()

!pip install ggplot
from ggplot import *
import rpy2
df = pd.DataFrame(dict(fpr = fpr, tpr = tpr))
ggplot(df, aes(x = 'fpr', y = 'tpr')) + geom_line() + geom_abline(linetype = 'dashed')

"""### *HPV+ and HPV- *"""

#LIBRARIES
import pandas as pd 
import glob 
import os

#Disease PBMC (HPV+ and HPV-)
hp="/content/drive/MyDrive/HNSCC/single_file_processing/pbmc_disease_pos_train/combined.csv"
hp = pd.read_csv(hp)
hn="/content/drive/MyDrive/HNSCC/single_file_processing/pbmc_disease_neg_train/combined.csv"
hn = pd.read_csv(hn)

hp_pbmc_l = hp.assign(label='1')
hp_pbmc_l = pd.DataFrame(hp_pbmc_l)
hp_pbmc_l.drop(hp_pbmc_l.iloc[:, 0:2], inplace=True, axis=1)
hp_pbmc_l=hp_pbmc_l.fillna(0)
hp_pbmc_l.to_csv("/content/drive/MyDrive/HNSCC/single_file_processing/Labelled data/pbmc_HPV_pos_label_1")

hp_pbmc_l

hn_pbmc_l = hn.assign(label='0')
hn_pbmc_l = pd.DataFrame(hn_pbmc_l)
hn_pbmc_l.drop(hn_pbmc_l.iloc[:, 0:2], inplace=True, axis=1)
hn_pbmc_l=hn_pbmc_l.fillna(0)
hn_pbmc_l.to_csv("/content/drive/MyDrive/HNSCC/single_file_processing/Labelled data/pbmc_HPV_neg_label_1")

hn_pbmc_l

pbmc_l= pd.concat((hp_pbmc_l,hn_pbmc_l),axis =0)
pbmc_l=pbmc_l.fillna(0)
pbmc_l.to_csv("/content/drive/MyDrive/HNSCC/single_file_processing/Labelled data/pbmc_both_label")

pbmc_l



pbmc_l=pbmc_l.loc[:,(pbmc_l==0).mean()<.80]
pbmc_l

pbmc_label=pbmc_l.iloc[:,1:]     #without sample column

pbmc_wo_label = pbmc_label.iloc[: , :-1]  #without label

!pip install mrmr_selection
import mrmr

from mrmr import mrmr_classif

selected_features = mrmr_classif(X=pbmc_wo_label, y=pbmc_label['label'], K=100)

selected_features

X_selected = pbmc_wo_label[selected_features]
X_selected

# split a dataset into train and test sets

from sklearn.model_selection import train_test_split
# create dataset
# split into train test sets
Y=pbmc_label['label']
X_train, X_test, y_train, y_test = train_test_split(X_selected, Y, test_size=0.20)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

import tensorflow as tf
from tensorflow import keras

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(100,)),
    keras.layers.Dense(16, activation=tf.nn.relu),
	keras.layers.Dense(16, activation=tf.nn.relu),
    keras.layers.Dense(1, activation=tf.nn.sigmoid),
])

y_train=y_train.astype(int)
X_train=X_train.astype(int)
y_test=y_test.astype(int)
X_test=X_test.astype(int)

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=50, batch_size=32)
test_loss, test_acc = model.evaluate(X_test, y_test)
train_loss, train_acc=model.evaluate(X_train, y_train)

test_loss

test_acc

train_loss

train_acc



pred=model.predict(X_test)
pred=pred.round()
pred

from sklearn.metrics import confusion_matrix
#import scikitplot as skplt
y_true=y_test
y_pred=pred
cm1=confusion_matrix(y_true=y_test, y_pred=pred)
print(cm1)
#skplt.metrics.plot_confusion_mXtrix(real_values, pred_values,figsize=(8,8))

TP=cm1[0,0]
FN=cm1[0,1]
TN=cm1[1,1]
FP=cm1[1,0]

import math
sensitivity1 = TP / (TP + FN)
print('Sensitivity : ', sensitivity1 )

specificity1 = TN / (FP + TN)
print('Specificity : ', specificity1)
precision= TP / (TP + FP)
print('Precision : ', precision)
NegativePredictiveValue= TN / (TN + FN)
print('Negative Predictive Value : ', NegativePredictiveValue)
FalsePositiveRate=  FP / (FP + TN)
print('False Positive Rate : ', FalsePositiveRate)
FDR= FP / (FP + TP)
print('False Discovery Rate : ', FDR)
FNR= FN / (FN + TP)
print('False Negative Rate : ', FNR)
#Accuracy= (TP + TN) / (P + N)
#print('Accuracy : ', Accuracy)
F1_Score= (2*TP) / ((2*TP) + FP + FN)
print('F1 Score : ', F1_Score)
MCC=(TP*TN - FP*FN) / math.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))
print('Matthews Correlation Coefficient :', MCC)

f1_score(y_true, y_pred)

recall_score(y_test, pred)

matthews_corrcoef(y_test, pred)

accuracy_score(y_test, pred)



import sklearn.metrics as metrics
# calculate the fpr and tpr for all thresholds of the classification

fpr, tpr, threshold = metrics.roc_curve(y_test, pred)
roc_auc = metrics.auc(fpr, tpr)

!pip install matplotlib.pyplot
import matplotlib.pyplot as plt
plt.title('Receiver Operating Characteristic')
plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
plt.legend(loc = 'lower right')
plt.plot([0, 1], [0, 1],'r--')
plt.xlim([0, 1])
plt.ylim([0, 1])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.show()

"""## **TRAIL**"""

india= pd.DataFrame({
    "city":["mum","del","up"],
    "temp":[21,23,34],
    "humid":[90,87,75]
})
india

pak= pd.DataFrame({
    "city":["lah","xx"],
    "humid":[90,87],
    "wind":[23,45]
})
pak

frames=[india, pak]
c = pd.concat(frames)
c

c.fillna(0)

directory = input()
final_df= pd.DataFrame()

for file in os.scandir(directory):
  df= pd.read_csv(file)
  final_df = pd.concat((final_df,df),axis =0 )

final_df.to_csv(directory+'/combined.csv')



import pandas as pd
dffirst = pd.read_csv("/content/drive/MyDrive/HNSCC/PBMC_Disease_Train_HPV_neg/append_data_PBMC_Disease_Train_HPV_neg.csv", nrows = 100)
dfsecond = pd.read_csv("/content/drive/MyDrive/HNSCC/PBMC_Disease_Train_HPV_pos/append_data.csv", nrows = 100)
dffirst = dffirst.iloc[: , 1:]
dfsecond = dfsecond.iloc[: , 1:]
final_df = dffirst.append(dfsecond)
final_df.to_csv("merged.csv")

final_df.to_csv("merged.csv")

dffirst = pd.read_csv("/content/drive/MyDrive/HNSCC/PBMC_Disease_Train_HPV_neg/append_data_PBMC_Disease_Train_HPV_neg.csv", nrows = 10)
dffirst

dfsecond = pd.read_csv("/content/drive/MyDrive/HNSCC/PBMC_Disease_Train_HPV_pos/append_data.csv", nrows = 10)
dfsecond

dffirst = dffirst.iloc[: , 1:]
dfsecond = dfsecond.iloc[: , 1:]

final_df = dffirst.append(dfsecond)

final_df

